# admin_private.py

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

# –ú–æ–∏ –º–æ–¥—É–ª–∏
import orm
from filters.chat_types import ChatTypeFilter, IsAdmin
from keyboards.reply import gen_keyboard
from keyboards.inline import gen_inline_keyboard
from states.admin_states import AddProduct, AddBanner
from states.reset import reset_state
from states.back import back_state


router = Router()
router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


# –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
admin_kb = gen_keyboard(
    buttons = [
        "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
        "–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä"
    ],
    placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    size = (2, 1)
)


# –ö–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –∏ "–ù–∞–∑–∞–¥"
cancel_and_back = gen_keyboard(
    buttons = ["–û—Ç–º–µ–Ω–∞", "–ù–∞–∑–∞–¥"],
    size = (2,)
)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
@router.message(Command("admin"))
async def admin(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup = admin_kb
    )


# –û—Ç–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞
@router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_add(message: types.Message, state: FSMContext) -> None:
    await reset_state(message, state, keyboard = admin_kb)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é AddProduct
@router.message(StateFilter("*"), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back_add(message: types.Message, state: FSMContext) -> None:
    await back_state(AddProduct, message, state)


# –ó–∞–ø—É—Å–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(StateFilter(None), F.data.startswith("change_"))
async def change_product(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    product_id = callback.data.split("_")[-1]
    product_for_change = await orm.product.get(session, int(product_id))

    AddProduct.product_for_change = product_for_change
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        reply_markup = gen_keyboard(
            [
                "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                "–û—Ç–º–µ–Ω–∞", "–ù–∞–∑–∞–¥",
            ],
            size = (1, 2)
        )
    )
    
    await state.set_state(AddProduct.name)


# –ó–∞–ø—É—Å–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –î–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_pizza(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        reply_markup = cancel_and_back
    )

    await state.set_state(AddProduct.name)


# –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.message(AddProduct.name, or_f(F.text, F.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
async def add_name(message: types.Message, state: FSMContext):
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.update_data(name = AddProduct.product_for_change.name)
    else:
        await state.update_data(name = message.text)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.description)


# –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.message(AddProduct.description, or_f(F.text, F.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
async def add_description(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        await state.update_data(description = AddProduct.product_for_change.description)
    else:
        await state.update_data(description = message.text)
    
    categories = await orm.categories.get(session)
    buttons = {
        category.name: str(category.category_id)
        for category in categories
    }
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞",
        reply_markup = gen_inline_keyboard(buttons, size = (2,))
    )
    
    await state.set_state(AddProduct.category)


# –õ–æ–≤–∏–º callback –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(AddProduct.category)
async def category_choice(callback: types.CallbackQuery, state: FSMContext , session: AsyncSession):
    if int(callback.data) in [category.category_id for category in await orm.categories.get(session)]:
        await callback.answer()
        await state.update_data(category = callback.data)
        await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.")
        await state.set_state(AddProduct.price)
    else:
        await callback.answer()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫.")


# –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ inline –∫–Ω–æ–ø–∫—É
@router.message(AddProduct.category)
async def not_category(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫üëÜ") 


# –¶–µ–Ω–∞ –ø–∏—Ü—Ü—ã
@router.message(
    AddProduct.price,
    or_f(
        F.text.replace(".", "").isnumeric(),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
        F.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    )
)
async def add_price(message: types.Message, state: FSMContext):
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç—É –∂–µ —Å–∞–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        await state.update_data(price = AddProduct.product_for_change.price)
    else:
        await state.update_data(price = float(message.text))
    
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.image)


# –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –Ω–µ –≤ —á–∏—Å–ª–æ–≤–æ–º –≤–∏–¥–µ
@router.message(
    AddProduct.price,
    ~F.text.replace(".", "").isnumeric(),  # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ
)
async def bad_price(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")


# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏—Ü—Ü—ã
@router.message(AddProduct.image, or_f(F.photo, F.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
async def add_image(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await state.update_data(image = AddProduct.product_for_change.image)
    else:
        await state.update_data(image = message.photo[-1].file_id)

    data = await state.get_data()

    if AddProduct.product_for_change:
        await orm.product.update(
            session,
            AddProduct.product_for_change.product_id,
            data
        )
        await message.answer(
            "–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã",
            reply_markup = admin_kb
        )
    
    else:
        await orm.product.add(session, data)
        await message.answer(
            "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–Ω—é",
            reply_markup = admin_kb
        )

    await state.clear()


# –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –Ω–µ —Ñ–æ—Ç–∫–∞
@router.message(AddProduct.image, ~F.photo)
async def not_image(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG/JPG/JPEG")


# –ó–∞–ø—É—Å–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è AddBanner
@router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä")
async def add_banner(message: types.Message, state: FSMContext, session: AsyncSession):
    pages_names = [
        page.name
        for page in await orm.banner.get_info_pages(session)
    ]

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–∞–Ω–Ω–µ—Ä–∞"
        "\n–í –æ–ø–∏—Å–∞–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:"
        f"\n{', '.join(pages_names)}"
    )

    await state.set_state(AddBanner.image)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
@router.message(AddBanner.image, F.photo)
async def load_banner(message: types.Message, state: FSMContext, session: AsyncSession):
    image_id = message.photo[-1].file_id
    for_page = message.caption.strip()
    pages_names = [
        page.name
        for page in await orm.banner.get_info_pages(session)
    ]

    if for_page not in pages_names:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!"
            f"\n–∏–ª–∏ {', –∏–ª–∏ '.join(pages_names)}"
        )
        return
    
    await orm.banner.change_image(session, for_page, image_id)
    await message.answer("–ë–∞–Ω–Ω–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω—ë–Ω")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"
# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(F.text == "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
async def click_assortment(message: types.Message, session: AsyncSession):
    categories = await orm.categories.get(session)
    buttons = {
        category.name: f"category_{category.category_id}" for category in categories
    }

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        reply_markup = gen_inline_keyboard(buttons, size = (2,))
    )


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(F.data.startswith("category_"))
async def get_assortment(callback: types.CallbackQuery, session: AsyncSession):
    await callback.answer()
    
    category_id = callback.data.split("_")[-1]
    
    for product in await orm.product.get_all(session, category_id):
        await callback.message.answer_photo(
            product.image,
            caption = f"<strong>{product.name}</strong>"
                      f"\n{product.description}"
                      f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ‚ÇΩ{round(product.price, 2)}",
            
            reply_markup = gen_inline_keyboard(
                {
                    "–£–¥–∞–ª–∏—Ç—å": f"delete_{product.product_id}",
                    "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{product.product_id}"
                },
                size = (2,)
            )
        )


# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(StateFilter(None), F.data.startswith("delete_"))
async def delete_product(callback: types.CallbackQuery, session: AsyncSession):
    product_id = callback.data.split("_")[-1]
    await orm.product.delete(session, int(product_id))

    await callback.message.delete()
    await callback.message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
